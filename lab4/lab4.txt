Question 2.

/* Create the tables from the relational model */

CREATE TABLE `passenger` (
    `passport_number` INT NOT NULL,
    `name` VARCHAR(30),
    PRIMARY KEY `pk_passport_number`(`passport_number`)
);


CREATE TABLE `contact` (
    `passport_number` INT NOT NULL,
    `email` VARCHAR(30),
    `phone_number` BIGINT NOT NULL,
    PRIMARY KEY `pk_passport_number`(`passport_number`),
    CONSTRAINT `fk_contact_passenger`
        FOREIGN KEY (`passport_number`)
        REFERENCES `passenger` (`passport_number`)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);


CREATE TABLE `year` (
    `year` INT NOT NULL,
    `profit_factor` DOUBLE NOT NULL,
    PRIMARY KEY `pk_year`(`year`)
);


CREATE TABLE `weekday` (
    `name` VARCHAR(10),
    `year` INT NOT NULL,
    `pricing_factor` DOUBLE NOT NULL,
    PRIMARY KEY `pk_name_year`(`name`, `year`),
    CONSTRAINT `fk_weekday_year`
        FOREIGN KEY (`year`)
        REFERENCES `year` (`year`)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);


CREATE TABLE `airport` (
    `airport_code` VARCHAR(3),
    `airport_name` VARCHAR(30),
    `country` VARCHAR(30),
    `city_name` VARCHAR(30),
    PRIMARY KEY `pk_airport_code`(`airport_code`)
);


CREATE TABLE `route` (
    `departure` VARCHAR(3) NOT NULL,
    `arrival` VARCHAR(3) NOT NULL,
    `price` DOUBLE,
    `year` INT NOT NULL,
    PRIMARY KEY `pk_dep_arr`(`departure`, `arrival`, `year`),
    CONSTRAINT `fk_route_airport`
        FOREIGN KEY (`departure`)
        REFERENCES `airport` (`airport_code`)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    CONSTRAINT `fk_airport_airport`
        FOREIGN KEY (`arrival`)
        REFERENCES `airport` (`airport_code`)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    CONSTRAINT `fk_route_year`
        FOREIGN KEY (`year`)
        REFERENCES `year` (`year`)
        ON DELETE NO ACTION
        ON UPDATE CASCADE
);


CREATE TABLE `weekly_schedule` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `departure_time` TIME,
    `year` INT NOT NULL,
    `weekday` VARCHAR(10) NOT NULL,
    `departure` VARCHAR(3) NOT NULL,
    `arrival` VARCHAR(3) NOT NULL,
    `route_year` INT NOT NULL,
    PRIMARY KEY `pk_id`(`id`),
    CONSTRAINT `fk_weekday_sched_weekday`
        FOREIGN KEY (`year`)
        REFERENCES `weekday` (`year`)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    CONSTRAINT `fk_weekday_weekday`
        FOREIGN KEY (`weekday`)
        REFERENCES `weekday` (`name`)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    CONSTRAINT `fk_weekday_1_route`
        FOREIGN KEY (`departure`)
        REFERENCES `route` (`departure`)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    CONSTRAINT `fk_weekday_2_route`
        FOREIGN KEY (`arrival`)
        REFERENCES `route` (`arrival`)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    CONSTRAINT `fk_weekly_schedule_year`
        FOREIGN KEY (`route_year`)
        REFERENCES `route` (`year`)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);


CREATE TABLE `flight` (
    `flight_number` INT NOT NULL AUTO_INCREMENT,
    `week` INT NOT NULL,
    `weekly_flight` INT NOT NULL,
    PRIMARY KEY `pk_flight_number`(`flight_number`),
    CONSTRAINT `fk_flight_weekly_schedule`
        FOREIGN KEY (`weekly_flight`)
        REFERENCES `weekly_schedule` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);


CREATE TABLE `credit_card` (
    `ccn` BIGINT NOT NULL,
    `name` VARCHAR(30),
    PRIMARY KEY `pk_ccn`(`ccn`)
);


CREATE TABLE `reservation` (
    `reservation_number` INT NOT NULL AUTO_INCREMENT,
    `num_seats_reserved` INT NOT NULL,
    `flight` INT NOT NULL,
    PRIMARY KEY `pk_reservation_number`(`reservation_number`),
    CONSTRAINT `fk_reservation_flight`
        FOREIGN KEY (`flight`)
        REFERENCES `flight` (`flight_number`)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);


CREATE TABLE `booking` (
    `reservation_number` INT NOT NULL,
    `price` DOUBLE NOT NULL,
    `credit_card` BIGINT NOT NULL,
    PRIMARY KEY `pk_reservation_number`(`reservation_number`),
    CONSTRAINT `fk_booking_reservation`
        FOREIGN KEY (`reservation_number`)
        REFERENCES `reservation` (`reservation_number`)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    CONSTRAINT `fk_booking_credit_card`
        FOREIGN KEY (`credit_card`)
        REFERENCES `credit_card` (`ccn`)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);


CREATE TABLE `contact_responsible` (
    `contact` INT NOT NULL,
    `reservation` INT NOT NULL,
    PRIMARY KEY `pk_contact_reservation`(`contact`, `reservation`),
    CONSTRAINT `fk_cr_contact`
        FOREIGN KEY (`contact`)
        REFERENCES `contact` (`passport_number`)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    CONSTRAINT `fk_cr_reservation`
        FOREIGN KEY (`reservation`)
        REFERENCES `reservation` (`reservation_number`)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);


CREATE TABLE `passenger_ticket` (
    `passenger` INT NOT NULL,
    `booking` INT NOT NULL,
    `ticket_no` INT,
    PRIMARY KEY `pk_passenger_booking`(`passenger`, `booking`),
    CONSTRAINT `fk_pt_passenger`
        FOREIGN KEY (`passenger`)
        REFERENCES `passenger` (`passport_number`)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    CONSTRAINT `fk_pt_booking`
        FOREIGN KEY (`booking`)
        REFERENCES `booking` (`reservation_number`)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);


CREATE TABLE `reserved_on` (
    `passenger` INT NOT NULL,
    `reservation` INT NOT NULL,
    PRIMARY KEY `pk_passenger_reservation`(`passenger`, `reservation`),
    CONSTRAINT `fk_ro_passenger`
        FOREIGN KEY (`passenger`)
        REFERENCES `passenger` (`passport_number`)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    CONSTRAINT `fk_ro_reservation`
        FOREIGN KEY (`reservation`)
        REFERENCES `reservation` (`reservation_number`)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

Question 3.
Note that since we define several functions in the same .sql-file, we only set the delimiter back to ; once (in the end).

a).

delimiter //

CREATE PROCEDURE addYear (IN year INT, IN factor DOUBLE)
BEGIN
    INSERT INTO year VALUES(year, factor);
END //

b)

CREATE PROCEDURE addDay(IN year INT, IN day VARCHAR(10), IN factor DOUBLE)
BEGIN
    INSERT INTO weekday VALUES(day, year, factor);
END //

c)

CREATE PROCEDURE addDestination(IN airport_code VARCHAR(3), IN name VARCHAR(30), IN country VARCHAR(30))
BEGIN
    INSERT INTO airport (airport_code, city_name, country) 
        VALUES(airport_code, name, country);
END //

d)

CREATE PROCEDURE addRoute(IN departure_airport_code VARCHAR(3), IN arrival_airport_code VARCHAR(30),
    IN year INT, IN routeprice DOUBLE)
BEGIN
    INSERT INTO route (departure, arrival, price, year) 
        VALUES(departure_airport_code, arrival_airport_code, routeprice, year);
END //

e)

/* A procedure that adds a flight to the weekly schedule */
CREATE PROCEDURE addFlight(IN departure_airport_code VARCHAR(3), IN arrival_airport_code VARCHAR(30),
IN year INT, IN day VARCHAR(10), IN departure_time TIME)
BEGIN
    /* Declare loop counter and a variable to keep track of the schedule that corresponds
    to the flights */
    DECLARE loop_counter INT DEFAULT 0;
    DECLARE weekly_flight_id INT;

    /* Insert the weekly flight into the schedule. */
    INSERT INTO weekly_schedule (departure_time, year, weekday, departure, arrival, route_year) 
        VALUES(departure_time, year, day, departure_airport_code, arrival_airport_code, year);
    SET weekly_flight_id = LAST_INSERT_ID();

    /* Instantiate the weekly_flight once for each week in the year (52 weeks) */
    WHILE loop_counter < 52 DO
        SET loop_counter = loop_counter + 1;
        INSERT INTO flight (week, weekly_flight) 
        VALUES(loop_counter, weekly_flight_id);
    END WHILE;
END //

Question 4.

a)

CREATE FUNCTION calculateBookedSeats(flightnumber INT) RETURNS INT
BEGIN
    /* The number of booked seats in a flight is equal to the number of ticket numbers
    that corresponds to a the flight number */
    RETURN (SELECT COUNT(*) FROM flight 
                JOIN reservation res ON flight.flight_number = res.flight 
                JOIN booking b ON b.reservation_number = res.reservation_number
                JOIN passenger_ticket on b.reservation_number = passenger_ticket.booking
                WHERE flightnumber = flight.flight_number);
END //

CREATE FUNCTION calculateFreeSeats(flightnumber INT) RETURNS INT
BEGIN
    /* There is 40 places on a plane. The number of free seats is therefor 40 - the booked ones. */
    RETURN 40 - calculateBookedSeats(flightnumber);
END //

b)

CREATE FUNCTION calculatePrice(flightnumber INT) RETURNS DOUBLE
BEGIN
    DECLARE route_price DOUBLE;
    DECLARE profit_factor DOUBLE;
    DECLARE weekday_factor DOUBLE;

    SELECT r.price INTO route_price FROM flight f
           JOIN weekly_schedule ws ON f.weekly_flight = ws.id 
           JOIN route r ON (r.arrival = ws.arrival AND r.departure = ws.departure AND r.year = ws.route_year)
           WHERE f.flight_number = flightnumber;

    SELECT w.pricing_factor, year.profit_factor INTO weekday_factor, profit_factor FROM flight  f
        JOIN weekly_schedule ws ON f.weekly_flight = ws.id 
        JOIN weekday w ON w.name = ws.weekday 
        JOIN year ON w.year = year.year
        WHERE f.flight_number = flightnumber;

    RETURN ROUND(route_price * profit_factor * weekday_factor * (calculateBookedSeats(flightnumber)+1)/40, 13);
END //

Question 5.

/* A trigger that genereates a ticket number when you insert a new passenger into a booking */ 
CREATE TRIGGER unique_ticket_number BEFORE INSERT ON passenger_ticket FOR EACH ROW
BEGIN
    SET NEW.ticket_no = floor( 256203221 + (RAND() * 256203221));
END //

Question 6.

a)

CREATE PROCEDURE addReservation(IN departure_airport_code VARCHAR(3), IN arrival_airport_code VARCHAR(30), IN year INT, IN week INT, IN day VARCHAR(10), IN time TIME, IN number_of_passengers INT, OUT reservation_number INT)
BEGIN
    DECLARE flight_number INT;
    
    /* Get the flight that corresponds to the passed in parameters */
    SELECT flight.flight_number INTO flight_number FROM weekly_schedule w
        JOIN flight ON flight.weekly_flight = w.id
        WHERE w.departure = departure_airport_code 
            AND w.arrival = arrival_airport_code 
            AND w.year = year 
            AND w.weekday = day 
            AND w.departure_time = time 
            AND flight.week = week
        LIMIT 1;
    
    /* The flight must exist */
    IF flight_number is NULL THEN
        SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'There exist no flightor the given route, date and time.';
    END IF;

    /* There must be enough free seats available */
    IF calculateFreeSeats(flight_number) < number_of_passengers THEN
        SIGNAL SQLSTATE '42001' SET MESSAGE_TEXT = 'There are not enough seats available on the chosen flight.';
    END IF;

    INSERT INTO reservation (num_seats_reserved, flight) VALUES (number_of_passengers, flight_number);
    set reservation_number = LAST_INSERT_ID();
END //

b)

CREATE PROCEDURE addPassenger(IN reservation_nr INT, IN passport_number INT, IN name VARCHAR(30))
BEGIN
    DECLARE passenger INT;

    /* Check so that the reservation exists. This procedure call will give an error otherwise */
    IF (NOT EXISTS(SELECT reservation_number FROM reservation WHERE reservation_number = reservation_nr)) THEN
        SIGNAL SQLSTATE '42002' SET MESSAGE_TEXT = 'The given reservation number does not exist.';
    END IF;

    SELECT p.passport_number INTO passenger FROM passenger p WHERE p.passport_number = passport_number;

    IF passenger is NULL THEN
        INSERT INTO passenger VALUES(passport_number, name);
    END IF;

    IF (EXISTS(SELECT * FROM booking WHERE reservation_number=reservation_nr)) THEN
        SIGNAL SQLSTATE '42005' SET MESSAGE_TEXT = 'The booking has already been payed and no further passengers can be added.';
    END IF;

    INSERT INTO reserved_on VALUES(passport_number, reservation_nr);
END //

c)

CREATE PROCEDURE addContact(IN reservation_nr INT, IN passport_number INT, IN email VARCHAR(30), IN phone BIGINT)
BEGIN
    DECLARE passenger INT;

    /* Check so that the reservation exists. This procedure call will give an error otherwise */
    IF (NOT EXISTS(SELECT reservation_number FROM reservation WHERE reservation_number = reservation_nr)) THEN
        SIGNAL SQLSTATE '42002' SET MESSAGE_TEXT = 'The given reservation number does not exist.';
    END IF;

    SELECT ro.passenger INTO passenger FROM reserved_on ro WHERE ro.passenger = passport_number AND ro.reservation = reservation_nr;
    
    /* The contact must be a passenger */
    IF passenger is NULL THEN
        SIGNAL SQLSTATE '42002' SET MESSAGE_TEXT = 'The person is not a passenger of the reservation.';
    END IF;

    /* The passenger as a contact */
    INSERT INTO contact VALUES(passenger, email, phone)
        ON DUPLICATE KEY UPDATE contact.email=email, contact.phone_number=phone;

    INSERT INTO contact_responsible VALUES(passport_number, reservation_nr);
END //

d)

/* Procedure that pays for a reservation */
CREATE PROCEDURE addPayment(IN reservation_nr INT, IN cardholder_name VARCHAR(30), IN credit_card_number BIGINT)
BEGIN
    DECLARE flight_number INT;
    DECLARE res_count INT;

    /* Check so that the reservation exists. This procedure call will give an error otherwise */
    IF (NOT EXISTS(SELECT reservation_number FROM reservation res WHERE reservation_number = reservation_nr)) THEN
        SIGNAL SQLSTATE '42002' SET MESSAGE_TEXT = 'The given reservation number does not exist.';
    END IF;

    /* Get the flight number and number of seats for the reservation. */
    SELECT flight INTO flight_number FROM reservation res WHERE reservation_number=reservation_nr;
    SELECT COUNT(*) INTO res_count FROM reservation res JOIN reserved_on ro ON reservation_number=ro.reservation
        WHERE reservation_number = reservation_nr;

    /* The reservation must have a contact for it to be payable */
    IF (NOT EXISTS(SELECT * FROM contact_responsible cr WHERE cr.reservation=reservation_nr)) THEN
        SIGNAL SQLSTATE '42004' SET MESSAGE_TEXT = 'The reservation has no contact yet.';
    END IF;

    /* Check so that there is enough reserved seats */
    IF calculateFreeSeats(flight_number) < res_count THEN
        DELETE FROM reservation WHERE reservation_number=reservation_nr;
        SIGNAL SQLSTATE '42003' SET MESSAGE_TEXT = 'There are not enough seats available on the flight anymore, deleting reservation.';
    END IF;

    /* Everything is OK. Insert the values */
    INSERT INTO credit_card VALUES(credit_card_number, cardholder_name)
        ON DUPLICATE KEY UPDATE ccn=credit_card_number;

    
    INSERT INTO booking VALUES(reservation_nr, calculatePrice(flight_number), credit_card_number);
    INSERT INTO passenger_ticket (booking, passenger) 
        (SELECT reservation_nr, passport_number FROM reserved_on ro
            JOIN passenger p ON (p.passport_number = ro.passenger) 
        WHERE ro.reservation = reservation_nr);

END //

delimiter ;


Question 7.


CREATE VIEW allFlights AS 
    SELECT ad.city_name departure_city_name, aa.city_name destination_city_name, ws.departure_time departure_time,
    ws.weekday departure_day, flight.week departure_week, ws.year departure_year, 
    calculateFreeSeats(flight.flight_number) nr_of_free_seats, calculatePrice(flight.flight_number) current_price_per_seat
    FROM weekly_schedule ws 
        JOIN flight ON flight.weekly_flight = ws.id
        JOIN route r ON (r.departure = ws.departure AND r.arrival = ws.arrival AND r.year = ws.route_year)
        JOIN airport aa ON (aa.airport_code = r.arrival)
        JOIN airport ad ON (ad.airport_code = r.departure);


Question 8.

a) You can encrypt it. Even if the hackers got access to the database, they would not be able to decode the credit card information.

b)
1. Stored procedures will reduce the amount of network traffic. You only need to send one statement over the network and then all of the statements in the procedure will be executed on the server. The alternative would be to send all the statements over the network.
2. Stored procedures can be executed faster. The optimizations that are done when performing a query is done once and compiled for later use, if you were to use individual queries these optimizations would be done every time.
3. Stored procedures can enhance the security. You can enable users to call stored procedures, even if they are not allowed to execute the statements inside of the procedure directly. 

9.

a) 

Entered in A:
CALL addReservation("MIT","HOB",2010,1,"Monday","09:00:00",3,@a);

b) No, it is not visible. Since a transaction is executed as an atomic unit and we havn't called COMMIT, the data isn't visible outside of the transaction in A.

c) The statement in B gets stuck and does not finish.

A:
START TRANSACTION;
CALL addReservation("MIT","HOB",2010,1,"Monday","09:00:00",3,@a); // Adds a write lock to reservation
COMMIT;

B:
START TRANSACTION;
update reservation set flight=2; // Waiting for A to release the write lock.
COMMIT;

When the INSERT is executed in session A a write lock is added to make sure that the isolation of transactions is intact. With this lock, B can not modify the data until A has executed COMMIT.

10 a)

No. Before adding a payment the procedure checks so that there are enough unpaid seats left on the flight. More details in b.

b) 


<<<<<<< HEAD
NULL        /* Procedure that pays for a reservation */
0       CREATE PROCEDURE addPayment(IN reservation_nr INT, IN cardholder_name VARCHAR(30), IN credit_card_number BIGINT)
1        BEGIN
2            DECLARE flight_number INT;
3            DECLARE res_count INT;
4        
5            /* Check so that the reservation exists. This procedure call will give an error otherwise */
6            IF (NOT EXISTS(SELECT reservation_number FROM reservation WHERE reservation_number = reservation_nr)) THEN
7                SIGNAL SQLSTATE '42002' SET MESSAGE_TEXT = 'The given reservation number does not exist.';
8            END IF;
9         
10           /* Get the flight number and number of seats for the reservation. */
11          SELECT flight INTO flight_number FROM reservation WHERE reservation_number=reservation_nr;
12          SELECT COUNT(*) INTO res_count FROM reservation r JOIN reserved_on ro ON r.reservation_number=ro.reservation
13              WHERE r.reservation_number = reservation_nr;
14      
15          /* Check so that there is enough reserved seats */
16          IF calculateFreeSeats(flight_number) < res_count THEN
17              DELETE FROM reservation WHERE reservation_number=reservation_nr;
18              SIGNAL SQLSTATE '42003' SET MESSAGE_TEXT = 'There are not enough seats available on the flight anymore, deleting reservation.';
19          END IF;
20      
21          /* The reservation must have a contact for it to be payable */
22          IF (NOT EXISTS(SELECT * FROM contact_responsible cr WHERE cr.reservation=reservation_nr)) THEN
23              SIGNAL SQLSTATE '42004' SET MESSAGE_TEXT = 'The reservation has no contact yet.';
24          END IF;
25      
26          /* Everything is OK. Insert the values */
27          INSERT INTO credit_card VALUES(credit_card_number, cardholder_name);
28          INSERT INTO booking VALUES(reservation_nr, calculatePrice(flight_number), credit_card_number);
29          INSERT INTO passenger_ticket (booking, passenger) 
30              (SELECT reservation_nr, passport_number FROM reserved_on ro
31                  JOIN passenger p ON (p.passport_number = ro.passenger) 
32              WHERE ro.reservation = reservation_nr);
33            END //
34

Yes, it can occur. If both sessions have executed line number 16 before any of them completes the inserts in lines 27-32 we will get an overbooking. Otherwise the check at line 41 will make sure no overbooking occurs.

This problem is called "lost update".


c)
=======
1	0 /* Procedure that pays for a reservation */
2	"		CREATE PROCEDURE addPayment(IN reservation_nr INT, IN cardholder_name VARCHAR(30), IN credit_card_number BIGINT)"
3	"		BEGIN"
4	"		    DECLARE flight_number INT;"
5	"		    DECLARE res_count INT;"
6	
7	"		    /* Check so that the reservation exists. This procedure call will give an error otherwise */"
8	"		    IF (NOT EXISTS(SELECT reservation_number FROM reservation WHERE reservation_number = reservation_nr)) THEN"
9	"		        SIGNAL SQLSTATE '42002' SET MESSAGE_TEXT = 'The given reservation number does not exist.';"
10	"		    END IF;"
11	
12	"		    /* Get the flight number and number of seats for the reservation. */"
13	"		    SELECT flight INTO flight_number FROM reservation WHERE reservation_number=reservation_nr;"
14	"		    SELECT COUNT(*) INTO res_count FROM reservation r JOIN reserved_on ro ON r.reservation_number=ro.reservation"
15	"		        WHERE r.reservation_number = reservation_nr;"
16	
17	"		    /* Check so that there is enough reserved seats */"
18	"		    IF calculateFreeSeats(flight_number) < res_count THEN"
19	"		        DELETE FROM reservation WHERE reservation_number=reservation_nr;"
20	"		        SIGNAL SQLSTATE '42003' SET MESSAGE_TEXT = 'There are not enough seats available on the flight anymore, deleting reservation.';"
21	"		    END IF;"
22	
23	"		    /* The reservation must have a contact for it to be payable */"
24	"		    IF (NOT EXISTS(SELECT * FROM contact_responsible cr WHERE cr.reservation=reservation_nr)) THEN"
25	"		        SIGNAL SQLSTATE '42004' SET MESSAGE_TEXT = 'The reservation has no contact yet.';"
26	"		    END IF;"
27	
28	"		    /* Everything is OK. Insert the values */"
29	"		    INSERT INTO credit_card VALUES(credit_card_number, cardholder_name);"
30	"		    INSERT INTO booking VALUES(reservation_nr, calculatePrice(flight_number), credit_card_number);"
31	"		    INSERT INTO passenger_ticket (booking, passenger) "
32	"		        (SELECT reservation_nr, passport_number FROM reserved_on ro"
33	"		            JOIN passenger p ON (p.passport_number = ro.passenger) "
34	"		        WHERE ro.reservation = reservation_nr);"
35	"		END //"



If both are done with line 41 (calculateFreeSeats < count reserved) before any completes the inserts from line 52 we will get an overbooking. Otherwise the check at line 41 will make sure no overbooking occurs.

This is "lost update".


10 c)
	
At line 25 insert:
    SELECT sleep(5);

If you run the queries simultaneously you will notice that an overbooking will occur; both sessions will think that there is enough free seats available when they begin to insert the data into the booking and passenger_ticket tables.

d)
The following code is used to solve the issue:
LOCK TABLES booking b READ, 
            booking WRITE, 
            contact_responsible cr READ, 
            credit_card WRITE, 
            flight f READ,
            flight READ, 
            passenger p READ, 
            passenger_ticket WRITE, 
            reservation res READ, 
            reservation WRITE, 
            reserved_on ro READ, 
            route r READ, 
            weekday w READ, 
            weekly_schedule ws READ,
            year READ;
CALL addPayment (@a, "Sauron",7878787878);
UNLOCK TABLES;

Before calling the critical procedure we acquire locks for all the tables involved in the query (MySQL requires that you lock all the tables if you lock any). Read and write respectively. By doing this we ensure that the first session to call the procedure will finish before the other session makes the first query. Since addPayment is the critical procedure we need to at least keep the locks during its execution. 

Potential secondary index of the database:

Use ticket number as a secondary index for the "passenger_ticket" relation. The "passenger_ticket" relation is ordered by passenger and reservation, so finding an entry using ticket number requires a linear search. Using ticket number as secondary index we can find it by using a binary search. In the index we use ticket number and the disk block of the entry. Below is an example of how this index would improve access to the data.

Example case: We have had (on average) two hundred passengers per day for the last five years. Each entry has passenger: 4 byte (INT), reservation: 4 byte (INT) and ticket number: 4 byte (INT). 12 bytes per entry. We assume a block size for the database of 100 bytes.

entries 									= 200 * 365 * 5 = 365 000
blocking factor 							= floor(100 / 12) = 8
blocks 										= ceil(365 000 / 8) = 45 625
Average linear search (no index) 			= blocks / 2 = 22 812.5

The secondary index on ticket_number is a non-ordering key field and as such has the same amount of entries as the passenger_ticket relation. Each index entry is 8 bytes.

blocking factor (secondary index) 			= floor(100 / 8) = 12
blocks (secondary index) 					= ceil(365 000 / 12) = 30 417
Worst case binary search (secondary index) 	= ceil(log_2(blocks)) = 16

As can be seen the improvement is enourmous!
