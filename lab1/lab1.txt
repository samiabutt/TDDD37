
Lab 1, Simon lindblad (simli746)

Notes
- If you are looking at www.ida.liu.se/webreg LiU-ID might show as "simli00" (employee ID). However, if you are looking at www.ida.liu.se/webreg3 my LiU-ID will show up as "simli746".
- In questions where it wasn't specified what attributes to show, I made reasonable assumptions (for example, I only show id, name and age_when_started in Question 5)

Question 1
List all employees, i.e. all tuples in the jbemployee relation.

mysql> select * from jbemployee;
+------+--------------------+--------+---------+-----------+-----------+
| id   | name               | salary | manager | birthyear | startyear |
+------+--------------------+--------+---------+-----------+-----------+
|   10 | Ross, Stanley      |  15908 |     199 |      1927 |      1945 |
|   11 | Ross, Stuart       |  12067 |    NULL |      1931 |      1932 |
|   13 | Edwards, Peter     |   9000 |     199 |      1928 |      1958 |
|   26 | Thompson, Bob      |  13000 |     199 |      1930 |      1970 |
|   32 | Smythe, Carol      |   9050 |     199 |      1929 |      1967 |
|   33 | Hayes, Evelyn      |  10100 |     199 |      1931 |      1963 |
|   35 | Evans, Michael     |   5000 |      32 |      1952 |      1974 |
|   37 | Raveen, Lemont     |  11985 |      26 |      1950 |      1974 |
|   55 | James, Mary        |  12000 |     199 |      1920 |      1969 |
|   98 | Williams, Judy     |   9000 |     199 |      1935 |      1969 |
|  129 | Thomas, Tom        |  10000 |     199 |      1941 |      1962 |
|  157 | Jones, Tim         |  12000 |     199 |      1940 |      1960 |
|  199 | Bullock, J.D.      |  27000 |    NULL |      1920 |      1920 |
|  215 | Collins, Joanne    |   7000 |      10 |      1950 |      1971 |
|  430 | Brunet, Paul C.    |  17674 |     129 |      1938 |      1959 |
|  843 | Schmidt, Herman    |  11204 |      26 |      1936 |      1956 |
|  994 | Iwano, Masahiro    |  15641 |     129 |      1944 |      1970 |
| 1110 | Smith, Paul        |   6000 |      33 |      1952 |      1973 |
| 1330 | Onstad, Richard    |   8779 |      13 |      1952 |      1971 |
| 1523 | Zugnoni, Arthur A. |  19868 |     129 |      1928 |      1949 |
| 1639 | Choy, Wanda        |  11160 |      55 |      1947 |      1970 |
| 2398 | Wallace, Maggie J. |   7880 |      26 |      1940 |      1959 |
| 4901 | Bailey, Chas M.    |   8377 |      32 |      1956 |      1975 |
| 5119 | Bono, Sonny        |  13621 |      55 |      1939 |      1963 |
| 5219 | Schwarz, Jason B.  |  13374 |      33 |      1944 |      1959 |
+------+--------------------+--------+---------+-----------+-----------+
25 rows in set (0.00 sec)

Question 2
List the name of all departments in alphabetical order. Note: by "name" we mean the name attribute for all tuples in the jbdept relation

mysql> select name from jbdept order by name;
+------------------+
| name             |
+------------------+
| Bargain          |
| Book             |
| Candy            |
| Children's       |
| Children's       |
| Furniture        |
| Giftwrap         |
| Jewelry          |
| Junior Miss      |
| Junior's         |
| Linens           |
| Major Appliances |
| Men's            |
| Sportswear       |
| Stationary       |
| Toys             |
| Women's          |
| Women's          |
| Women's          |
+------------------+
19 rows in set (0.00 sec)

Question 3
What parts are not in store, i.e. qoh=0? (qoh = Quantity On Hand)

mysql> select * from jbparts where qoh = 0;
+----+-------------------+-------+--------+------+
| id | name              | color | weight | qoh  |
+----+-------------------+-------+--------+------+
| 11 | card reader       | gray  |    327 |    0 |
| 12 | card punch        | gray  |    427 |    0 |
| 13 | paper tape reader | black |    107 |    0 |
| 14 | paper tape punch  | black |    147 |    0 |
+----+-------------------+-------+--------+------+
4 rows in set (0.00 sec)

Question 4
Which employees have a salary between 9000 (included) and 10000 (included)?

mysql> select * from jbemployee where salary >= 9000 and salary <= 10000;
+-----+----------------+--------+---------+-----------+-----------+
| id  | name           | salary | manager | birthyear | startyear |
+-----+----------------+--------+---------+-----------+-----------+
|  13 | Edwards, Peter |   9000 |     199 |      1928 |      1958 |
|  32 | Smythe, Carol  |   9050 |     199 |      1929 |      1967 |
|  98 | Williams, Judy |   9000 |     199 |      1935 |      1969 |
| 129 | Thomas, Tom    |  10000 |     199 |      1941 |      1962 |
+-----+----------------+--------+---------+-----------+-----------+
4 rows in set (0.01 sec)ยง

Question 5
What was the age of each employee when they started working (startyear)?

mysql> select id,name,startyear-birthyear as age_when_started from jbemployee;
+------+--------------------+------------------+
| id   | name               | age_when_started |
+------+--------------------+------------------+
|   10 | Ross, Stanley      |               18 |
|   11 | Ross, Stuart       |                1 |
|   13 | Edwards, Peter     |               30 |
|   26 | Thompson, Bob      |               40 |
|   32 | Smythe, Carol      |               38 |
|   33 | Hayes, Evelyn      |               32 |
|   35 | Evans, Michael     |               22 |
|   37 | Raveen, Lemont     |               24 |
|   55 | James, Mary        |               49 |
|   98 | Williams, Judy     |               34 |
|  129 | Thomas, Tom        |               21 |
|  157 | Jones, Tim         |               20 |
|  199 | Bullock, J.D.      |                0 |
|  215 | Collins, Joanne    |               21 |
|  430 | Brunet, Paul C.    |               21 |
|  843 | Schmidt, Herman    |               20 |
|  994 | Iwano, Masahiro    |               26 |
| 1110 | Smith, Paul        |               21 |
| 1330 | Onstad, Richard    |               19 |
| 1523 | Zugnoni, Arthur A. |               21 |
| 1639 | Choy, Wanda        |               23 |
| 2398 | Wallace, Maggie J. |               19 |
| 4901 | Bailey, Chas M.    |               19 |
| 5119 | Bono, Sonny        |               24 |
| 5219 | Schwarz, Jason B.  |               15 |
+------+--------------------+------------------+
25 rows in set (0.00 sec)


Question 6
Which employees have a last name ending with "son"?
Assumption: I made the assumption that all names are stored in the format "last name, first name". This seems probable since the entries in the table are formatted this way. However, it is not specified anywhere.

mysql> select * from jbemployee where name like '%son, %';
+----+---------------+--------+---------+-----------+-----------+
| id | name          | salary | manager | birthyear | startyear |
+----+---------------+--------+---------+-----------+-----------+
| 26 | Thompson, Bob |  13000 |     199 |      1930 |      1970 |
+----+---------------+--------+---------+-----------+-----------+
1 row in set (0.00 sec)

Question 7
Which items (note items, not parts) have been delivered by a supplier called Fisher-Price? Formulate this query using a subquery in the where-clause.

mysql> select * from jbitem where supplier in (select id from jbsupplier where jbsupplier.name='Fisher-Price');
+-----+-----------------+------+-------+------+----------+
| id  | name            | dept | price | qoh  | supplier |
+-----+-----------------+------+-------+------+----------+
|  43 | Maze            |   49 |   325 |  200 |       89 |
| 107 | The 'Feel' Book |   35 |   225 |  225 |       89 |
| 119 | Squeeze Ball    |   49 |   250 |  400 |       89 |
+-----+-----------------+------+-------+------+----------+
3 rows in set (0.00 sec)

Question 8
Formulate the same query as above, but without a subquery.

mysql> select i.id,i.name,i.dept,i.price,i.qoh,i.supplier from jbitem i inner join jbsupplier s on i.supplier=s.id where s.name='Fisher-Price';
+-----+-----------------+------+-------+------+----------+
| id  | name            | dept | price | qoh  | supplier |
+-----+-----------------+------+-------+------+----------+
|  43 | Maze            |   49 |   325 |  200 |       89 |
| 107 | The 'Feel' Book |   35 |   225 |  225 |       89 |
| 119 | Squeeze Ball    |   49 |   250 |  400 |       89 |
+-----+-----------------+------+-------+------+----------+
3 rows in set (0.00 sec)

Question 9
Show all cities that have suppliers located in them. Formulate this query using a subquery in the where-clause.

mysql> select * from jbcity where id in (select city from jbsupplier);
+-----+----------------+-------+
| id  | name           | state |
+-----+----------------+-------+
|  10 | Amherst        | Mass  |
|  21 | Boston         | Mass  |
| 100 | New York       | NY    |
| 106 | White Plains   | Neb   |
| 118 | Hickville      | Okla  |
| 303 | Atlanta        | Ga    |
| 537 | Madison        | Wisc  |
| 609 | Paxton         | Ill   |
| 752 | Dallas         | Tex   |
| 802 | Denver         | Colo  |
| 841 | Salt Lake City | Utah  |
| 900 | Los Angeles    | Calif |
| 921 | San Diego      | Calif |
| 941 | San Francisco  | Calif |
| 981 | Seattle        | Wash  |
+-----+----------------+-------+
15 rows in set (0.00 sec)

Question 10
What is the name and color of the parts that are heavier than a card reader? Formulate this query using a subquery in the where-clause. (The SQL query must not contain the weight as a constant.)

mysql> select name, color from jbparts f where exists (select id from jbparts s where s.name="card reader" and f.weight>s.weight); 
+--------------+--------+
| name         | color  |
+--------------+--------+
| disk drive   | black  |
| tape drive   | black  |
| line printer | yellow |
| card punch   | gray   |
+--------------+--------+
4 rows in set (0.01 sec)

Question 11
Formulate the same query as above, but without a subquery. (The query must not contain the weight as a constant)

mysql> select f.name, f.color from jbparts f inner join jbparts s on f.weight > s.weight where s.name="card reader";
+--------------+--------+
| name         | color  |
+--------------+--------+
| disk drive   | black  |
| tape drive   | black  |
| line printer | yellow |
| card punch   | gray   |
+--------------+--------+
4 rows in set (0.01 sec)
lstlisting

Question 12
What is the average weight of black parts?

lstlisting
mysql> select avg(weight) from jbparts where color="black";
+-------------+
| avg(weight) |
+-------------+
|    347.2500 |
+-------------+
1 row in set (0.00 sec)

Question 13
What is the total weight of all parts that each supplier in Massachusetts (โMassโ) has delivered? Retrieve the name and the total weight for each of these suppliers. Do not forget to take the quantity of delivered parts into account. Note that one row should be returned for each supplier.

mysql> select s.name,sum(p.weight*d.quan) as total_weight from jbsupplier s inner join jbsupply d on d.supplier=s.id inner join jbparts p on p.id=d.part where s.city in (select id from jbcity where state="Mass") group by d.supplier;
+--------------+--------------+
| name         | total_weight |
+--------------+--------------+
| Fisher-Price |      1135000 |
| DEC          |         3120 |
+--------------+--------------+
2 rows in set (0.00 sec)

Question 14
Create a new relation (a table), with the same attributes as the table items using the CREATE TABLE syntax where you define every attribute explicitly (i.e. not as a copy of another table). Then fill the table with all items that cost less than the average price for items. Remember to define primary and foreign keys in your table!

mysql> create table jbitemnew (
    -> id int NOT NULL DEFAULT 0,
    -> name varchar(20) default null,
    -> dept int not null,
    -> price int default null,
    -> qoh int unsigned default null,
    -> supplier int not null,
    -> primary key (id),
    -> constraint fk_itemnew_dept foreign key (dept) references jbdept(id),
    -> constraint fk_itemnew_supplier foreign key (supplier) references jbsupplier(id)
    -> );
Query OK, 0 rows affected (0.01 sec)

mysql> insert into jbitemnew (select * from jbitem where price < (select avg(price) from jbitem));
Query OK, 14 rows affected (0.00 sec)
Records: 14  Duplicates: 0  Warnings: 0

Question 15
Create a view that contains the items that cost less than the average price for items.

mysql> create view item_view as select * from jbitem where price < (select avg(price) from jbitem);
Query OK, 0 rows affected (0.01 sec)

Question 16
What is the difference between a table and a view? One is static and the other is dynamic. Which is which and what do we mean by static respectively dynamic?

A view is a virtual table. Views are derived from other tables (that may be virtual as well). If you have a complicated query that you use frequently (for example a query on several different tables using join) you can create a view that is defined by the result of this query. The next time we want to query the data you can simply query the view that is specified as a single table.

The view is the dynamic and the table is static. When you access a view, that data is dynamically compiled from the database. Static refers to when you access a table, that data is retrieved from the physical storage instead of being compiled dynamically.

Question 17
Create a view, using only the implicit join notation, i.e. only use where statements but no inner join, right join or left join statements, that calculates the total cost of each debit, by considering price and quantity of each bought item. (To be used for charging customer accounts). The view should contain the sale identifier (debit) and total cost.

mysql> create view debit_cost as select d.id,sum(i.price*s.quantity) as total_cost from jbdebit d,jbitem i,jbsale s where d.id=s.debit and s.item=i.id group by d.id;
Query OK, 0 rows affected (0.02 sec)

mysql> select * from debit_cost;
+--------+------------+
| id     | total_cost |
+--------+------------+
| 100581 |       2050 |
| 100582 |       1000 |
| 100586 |      13446 |
| 100592 |        650 |
| 100593 |        430 |
| 100594 |       3295 |
+--------+------------+
6 rows in set (0.00 sec)

Question 18
Do the same as in (17), using only the explicit join notation, i.e. using only left, right or inner joins but no where statement. Motivate why you use the join you do (left, right or inner), and why this is the correct one (unlike the others).

I use inner join since I only want to consider the sales/items/debits that have a defined relation with the other table(s). If I were to use left or right joins, the entries (in the left or right table) that have a NULL value on the attribute that I joined on would be included as well. This is not what I want since I can only calculate the total cost of the debits that has all the information.

mysql> create view debit_cost_e as select d.id,sum(i.price*s.quantity) as total_cost from jbdebit d inner join jbsale s on d.id=s.debit inner join jbitem i on s.item=i.id group by d.id;
Query OK, 0 rows affected (0.02 sec)

mysql> select * from debit_cost_e;
+--------+------------+
| id     | total_cost |
+--------+------------+
| 100581 |       2050 |
| 100582 |       1000 |
| 100586 |      13446 |
| 100592 |        650 |
| 100593 |        430 |
| 100594 |       3295 |
+--------+------------+
6 rows in set (0.00 sec)

Question 19
Oh no! An earthquake!
a)
Remove all suppliers in Los Angeles from the table jbsupplier. This will not work right away (you will receive error code 23000) which you will have to solve by deleting some other related tuples. However, do not delete more tuples from other tables than necessary and do not change the structure of the tables, i.e. do not remove foreign keys.

mysql> delete from jbsupplier where city in (select id from jbcity where name="Los Angeles");
ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`tddd37`.`jbitem`, CONSTRAINT `fk_item_supplier` FOREIGN KEY (`supplier`) REFERENCES `jbsupplier` (`id`))

mysql> delete from jbitem where supplier in (select id from jbsupplier where city in (select id from jbcity where name="Los Angeles"));
ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`tddd37`.`jbsale`, CONSTRAINT `fk_sale_item` FOREIGN KEY (`item`) REFERENCES `jbitem` (`id`))

mysql> delete from jbsale where item in (select id from jbitem where supplier in (select id from jbsupplier where city in (select id from jbcity where name="Los Angeles")));
Query OK, 1 row affected (0.01 sec)

mysql> delete from jbitem where supplier in (select id from jbsupplier where city in (select id from jbcity where name="Los Angeles"));                             
Query OK, 2 rows affected (0.01 sec)

delete from jbsupplier where city in (select id from jbcity where name="Los Angeles");
ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`tddd37`.`jbitemnew`, CONSTRAINT `fk_itemnew_supplier` FOREIGN KEY (`supplier`) REFERENCES `jbsupplier` (`id`))

mysql> delete from jbitemnew where supplier in (select id from jbsupplier where city in (select id from jbcity where name="Los Angeles"));
Query OK, 1 row affected (0.00 sec)

mysql> delete from jbsupplier where city in (select id from jbcity where name="Los Angeles");
Query OK, 1 row affected (0.00 sec)

b)
Explain what you did and why.

If we try to delete the tuple(s) directly we will get an 23000 error, since we have foreign key constraints in jbitem and jbitemnew that points to the jbsupplier table. If you have a foreign key constraint that value must exist in the other table. Since we haven't attached any referential triggered action clause (on delete) to these foreign keys, the behaviour when trying to delete a tuple that has a foreign key constraint pointing to it isn't specified and MySQL won't let us delete the tuple. However, if we had defined "ON DELETE CASCADE" for these foreign keys, they would be deleted when we tried to delete the tuple from jbsupplier and we would not need to go through these steps.

The different steps I took in order to delete the tupes were:
- I tried to delete the tuple(s) from jbsupplier where the city matched "Los Angeles". This returned the 23000 error because of a foreign key constraint from jbitem.
- I tried to delete the tuple from jbitems that had a constraint to the the tuple(s) from the above query. This returned the 23000 error because of a foreign key constraint from jbsale.
- I deleted the tuple(s) from jbsale that had a constraint to the tuple(s) from the above query. This was successful.
- I deleted the tuple(s) jbitem that had a foreign key constraint to the tuple(s) from the first query again. This was successful since I had removed the conflicting tuple(s) from jbsale.
- I tried to delete the tuple(s) from jbsupplier from the first query. This returned the 23000 error again because of another foreign key constraint from the jbitemnew table.
- I deleted the tuple(s) from jbitemnew that had a foreign key constraint to the tuple(s) from the first query. This was successful.
- I deleted the tuple(s) from jbsupplier from the first query. Now this was successful since any foreign key constraints pointing to the tuple(s) had been removed.

Question 20
An employee has tried to find out which suppliers that have delivered items that have been sold. He has created a view and a query that shows the number of items sold from a supplier. The employee would also like include the suppliers which has delivered some items, although for whom no items have been sold so far. In other words he wants to list all suppliers, which has supplied any item, as well as the number of these items that have been sold. Help him! Drop and redefine jbsale_supply to consider suppliers that have delivered items that have never been sold as well. Hint: The above definition of jbsale_supply uses an (implicit) inner join that removes suppliers that have not had any of their delivered items sold.}


mysql> drop view jbsale_supply;
Query OK, 0 rows affected (0.00 sec)

mysql> create view jbsale_supply(supplier, item, quantity) as select jbsupplier.name, jbitem.name, jbsale.quantity from jbsupplier join jbitem on jbsupplier.id=jbitem.supplier left join jbsale on jbsale.item = jbitem.id;
Query OK, 0 rows affected (0.01 sec)

mysql> select supplier, sum(quantity) as sum from jbsale_supply group by supplier;
+--------------+------+
| supplier     | sum  |
+--------------+------+
| Cannon       |    6 |
| Fisher-Price | NULL |
| Levi-Strauss |    1 |
| Playskool    |    2 |
| White Stag   |    4 |
| Whitman's    |    2 |
+--------------+------+
6 rows in set (0.00 sec)